'use client';

import React, { useState, useEffect, useCallback } from 'react';
import { useParams } from 'next/navigation';
import { GameData, DetailedGameData } from '@/types';
import ModernScorecard from '@/components/ModernScorecard';
import LoadingSpinner from '@/components/LoadingSpinner';
import ErrorMessage from '@/components/ErrorMessage';

export default function GameDetailPage() {
	const params = useParams();
	const gameId = params.gameId as string;

	const [gameData, setGameData] = useState<GameData | null>(null);
	const [loading, setLoading] = useState(true);
	const [error, setError] = useState<string | null>(null);

	const fetchGameData = useCallback(async () => {
		try {
			setLoading(true);
			setError(null);

			const response = await fetch(`/api/game/${gameId}/detailed`);
			if (!response.ok) {
				throw new Error(`Failed to fetch game data: ${response.status}`);
			}

			const detailedData: DetailedGameData = await response.json();

			// Transform detailed data to GameData format expected by ModernScorecard
			const gameData: GameData = {
				game_id: detailedData.game_id,
				game_data: {
					away_team: detailedData.away_team,
					home_team: detailedData.home_team,
					game_date_str: detailedData.date,
					location: detailedData.venue,
					inning_list: detailedData.innings.map((inning) => ({
						inning: inning.inning,
						away: inning.away_runs || 0,
						home: inning.home_runs || 0,
					})),
					is_postponed: detailedData.status === 'Postponed',
					is_suspended: detailedData.status === 'Suspended',
				},
				svg_content: '', // Will be generated by ModernScorecard
				success: true,
			};

			setGameData(gameData);
		} catch (err) {
			setError(err instanceof Error ? err.message : 'Failed to load game data');
		} finally {
			setLoading(false);
		}
	}, [gameId]);

	useEffect(() => {
		if (gameId) {
			fetchGameData();
		}
	}, [gameId, fetchGameData]);

	if (loading) {
		return (
			<div className="flex items-center justify-center py-16">
				<LoadingSpinner />
			</div>
		);
	}

	if (error) {
		return (
			<div className="flex items-center justify-center py-16">
				<ErrorMessage message={error} />
			</div>
		);
	}

	if (!gameData) {
		return (
			<div className="flex items-center justify-center py-16">
				<ErrorMessage message="Game data not found" />
			</div>
		);
	}

	return (
		<div className="py-8">
			<ModernScorecard gameData={gameData} gameId={gameId} />
		</div>
	);
}
